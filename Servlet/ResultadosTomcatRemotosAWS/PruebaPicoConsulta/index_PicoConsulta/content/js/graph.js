/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 0 : 0;
        var yOffset = options.yaxis.mode === "time" ? 0 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 67451.0, "series": [{"data": [[0.0, 2.0], [0.1, 3.0], [0.2, 4.0], [0.3, 5.0], [0.4, 7.0], [0.5, 8.0], [0.6, 8.0], [0.7, 9.0], [0.8, 9.0], [0.9, 9.0], [1.0, 9.0], [1.1, 10.0], [1.2, 10.0], [1.3, 10.0], [1.4, 10.0], [1.5, 10.0], [1.6, 11.0], [1.7, 11.0], [1.8, 11.0], [1.9, 11.0], [2.0, 11.0], [2.1, 12.0], [2.2, 12.0], [2.3, 12.0], [2.4, 12.0], [2.5, 12.0], [2.6, 13.0], [2.7, 13.0], [2.8, 13.0], [2.9, 13.0], [3.0, 14.0], [3.1, 14.0], [3.2, 14.0], [3.3, 15.0], [3.4, 15.0], [3.5, 15.0], [3.6, 15.0], [3.7, 16.0], [3.8, 16.0], [3.9, 16.0], [4.0, 16.0], [4.1, 17.0], [4.2, 17.0], [4.3, 17.0], [4.4, 18.0], [4.5, 18.0], [4.6, 18.0], [4.7, 19.0], [4.8, 19.0], [4.9, 20.0], [5.0, 20.0], [5.1, 20.0], [5.2, 21.0], [5.3, 21.0], [5.4, 21.0], [5.5, 22.0], [5.6, 22.0], [5.7, 23.0], [5.8, 23.0], [5.9, 24.0], [6.0, 24.0], [6.1, 25.0], [6.2, 25.0], [6.3, 26.0], [6.4, 26.0], [6.5, 27.0], [6.6, 27.0], [6.7, 28.0], [6.8, 28.0], [6.9, 29.0], [7.0, 29.0], [7.1, 30.0], [7.2, 31.0], [7.3, 31.0], [7.4, 32.0], [7.5, 32.0], [7.6, 33.0], [7.7, 33.0], [7.8, 34.0], [7.9, 35.0], [8.0, 35.0], [8.1, 36.0], [8.2, 36.0], [8.3, 37.0], [8.4, 38.0], [8.5, 38.0], [8.6, 39.0], [8.7, 40.0], [8.8, 40.0], [8.9, 41.0], [9.0, 42.0], [9.1, 42.0], [9.2, 43.0], [9.3, 44.0], [9.4, 44.0], [9.5, 45.0], [9.6, 46.0], [9.7, 47.0], [9.8, 47.0], [9.9, 48.0], [10.0, 49.0], [10.1, 50.0], [10.2, 50.0], [10.3, 51.0], [10.4, 52.0], [10.5, 53.0], [10.6, 53.0], [10.7, 54.0], [10.8, 55.0], [10.9, 56.0], [11.0, 57.0], [11.1, 57.0], [11.2, 58.0], [11.3, 59.0], [11.4, 60.0], [11.5, 61.0], [11.6, 61.0], [11.7, 62.0], [11.8, 63.0], [11.9, 64.0], [12.0, 65.0], [12.1, 66.0], [12.2, 67.0], [12.3, 67.0], [12.4, 68.0], [12.5, 69.0], [12.6, 70.0], [12.7, 71.0], [12.8, 72.0], [12.9, 72.0], [13.0, 73.0], [13.1, 74.0], [13.2, 75.0], [13.3, 76.0], [13.4, 77.0], [13.5, 78.0], [13.6, 79.0], [13.7, 79.0], [13.8, 80.0], [13.9, 81.0], [14.0, 82.0], [14.1, 83.0], [14.2, 84.0], [14.3, 85.0], [14.4, 86.0], [14.5, 87.0], [14.6, 88.0], [14.7, 88.0], [14.8, 90.0], [14.9, 90.0], [15.0, 91.0], [15.1, 92.0], [15.2, 93.0], [15.3, 94.0], [15.4, 95.0], [15.5, 96.0], [15.6, 97.0], [15.7, 98.0], [15.8, 100.0], [15.9, 101.0], [16.0, 102.0], [16.1, 103.0], [16.2, 104.0], [16.3, 105.0], [16.4, 106.0], [16.5, 107.0], [16.6, 108.0], [16.7, 109.0], [16.8, 110.0], [16.9, 111.0], [17.0, 112.0], [17.1, 113.0], [17.2, 114.0], [17.3, 115.0], [17.4, 116.0], [17.5, 117.0], [17.6, 118.0], [17.7, 119.0], [17.8, 120.0], [17.9, 122.0], [18.0, 123.0], [18.1, 124.0], [18.2, 125.0], [18.3, 126.0], [18.4, 127.0], [18.5, 128.0], [18.6, 130.0], [18.7, 131.0], [18.8, 132.0], [18.9, 133.0], [19.0, 134.0], [19.1, 135.0], [19.2, 136.0], [19.3, 137.0], [19.4, 138.0], [19.5, 140.0], [19.6, 141.0], [19.7, 142.0], [19.8, 143.0], [19.9, 144.0], [20.0, 145.0], [20.1, 146.0], [20.2, 147.0], [20.3, 149.0], [20.4, 150.0], [20.5, 151.0], [20.6, 152.0], [20.7, 153.0], [20.8, 155.0], [20.9, 156.0], [21.0, 157.0], [21.1, 158.0], [21.2, 160.0], [21.3, 161.0], [21.4, 162.0], [21.5, 163.0], [21.6, 164.0], [21.7, 166.0], [21.8, 167.0], [21.9, 168.0], [22.0, 169.0], [22.1, 171.0], [22.2, 172.0], [22.3, 173.0], [22.4, 174.0], [22.5, 175.0], [22.6, 177.0], [22.7, 178.0], [22.8, 179.0], [22.9, 180.0], [23.0, 181.0], [23.1, 183.0], [23.2, 184.0], [23.3, 186.0], [23.4, 187.0], [23.5, 188.0], [23.6, 190.0], [23.7, 191.0], [23.8, 192.0], [23.9, 194.0], [24.0, 195.0], [24.1, 196.0], [24.2, 197.0], [24.3, 199.0], [24.4, 200.0], [24.5, 201.0], [24.6, 202.0], [24.7, 204.0], [24.8, 205.0], [24.9, 206.0], [25.0, 208.0], [25.1, 209.0], [25.2, 210.0], [25.3, 212.0], [25.4, 213.0], [25.5, 215.0], [25.6, 216.0], [25.7, 217.0], [25.8, 219.0], [25.9, 220.0], [26.0, 221.0], [26.1, 222.0], [26.2, 224.0], [26.3, 225.0], [26.4, 226.0], [26.5, 228.0], [26.6, 229.0], [26.7, 230.0], [26.8, 232.0], [26.9, 233.0], [27.0, 234.0], [27.1, 236.0], [27.2, 237.0], [27.3, 238.0], [27.4, 240.0], [27.5, 241.0], [27.6, 243.0], [27.7, 244.0], [27.8, 246.0], [27.9, 247.0], [28.0, 248.0], [28.1, 250.0], [28.2, 251.0], [28.3, 253.0], [28.4, 254.0], [28.5, 256.0], [28.6, 257.0], [28.7, 258.0], [28.8, 260.0], [28.9, 261.0], [29.0, 263.0], [29.1, 264.0], [29.2, 266.0], [29.3, 267.0], [29.4, 269.0], [29.5, 270.0], [29.6, 272.0], [29.7, 273.0], [29.8, 275.0], [29.9, 276.0], [30.0, 277.0], [30.1, 279.0], [30.2, 280.0], [30.3, 282.0], [30.4, 284.0], [30.5, 285.0], [30.6, 287.0], [30.7, 288.0], [30.8, 289.0], [30.9, 291.0], [31.0, 292.0], [31.1, 294.0], [31.2, 295.0], [31.3, 297.0], [31.4, 298.0], [31.5, 300.0], [31.6, 301.0], [31.7, 303.0], [31.8, 304.0], [31.9, 305.0], [32.0, 307.0], [32.1, 308.0], [32.2, 310.0], [32.3, 311.0], [32.4, 313.0], [32.5, 314.0], [32.6, 316.0], [32.7, 317.0], [32.8, 319.0], [32.9, 320.0], [33.0, 322.0], [33.1, 323.0], [33.2, 325.0], [33.3, 327.0], [33.4, 328.0], [33.5, 329.0], [33.6, 331.0], [33.7, 332.0], [33.8, 334.0], [33.9, 335.0], [34.0, 337.0], [34.1, 338.0], [34.2, 340.0], [34.3, 341.0], [34.4, 343.0], [34.5, 345.0], [34.6, 346.0], [34.7, 348.0], [34.8, 349.0], [34.9, 351.0], [35.0, 352.0], [35.1, 353.0], [35.2, 355.0], [35.3, 356.0], [35.4, 358.0], [35.5, 360.0], [35.6, 361.0], [35.7, 363.0], [35.8, 364.0], [35.9, 366.0], [36.0, 367.0], [36.1, 369.0], [36.2, 371.0], [36.3, 372.0], [36.4, 374.0], [36.5, 375.0], [36.6, 377.0], [36.7, 379.0], [36.8, 380.0], [36.9, 382.0], [37.0, 383.0], [37.1, 385.0], [37.2, 386.0], [37.3, 388.0], [37.4, 389.0], [37.5, 391.0], [37.6, 393.0], [37.7, 394.0], [37.8, 396.0], [37.9, 398.0], [38.0, 399.0], [38.1, 401.0], [38.2, 402.0], [38.3, 404.0], [38.4, 405.0], [38.5, 407.0], [38.6, 408.0], [38.7, 410.0], [38.8, 411.0], [38.9, 413.0], [39.0, 414.0], [39.1, 416.0], [39.2, 417.0], [39.3, 419.0], [39.4, 421.0], [39.5, 422.0], [39.6, 424.0], [39.7, 426.0], [39.8, 427.0], [39.9, 429.0], [40.0, 430.0], [40.1, 432.0], [40.2, 434.0], [40.3, 435.0], [40.4, 437.0], [40.5, 438.0], [40.6, 440.0], [40.7, 441.0], [40.8, 443.0], [40.9, 445.0], [41.0, 446.0], [41.1, 448.0], [41.2, 449.0], [41.3, 451.0], [41.4, 453.0], [41.5, 455.0], [41.6, 456.0], [41.7, 458.0], [41.8, 460.0], [41.9, 461.0], [42.0, 463.0], [42.1, 465.0], [42.2, 467.0], [42.3, 468.0], [42.4, 470.0], [42.5, 472.0], [42.6, 473.0], [42.7, 475.0], [42.8, 477.0], [42.9, 478.0], [43.0, 480.0], [43.1, 482.0], [43.2, 483.0], [43.3, 485.0], [43.4, 487.0], [43.5, 488.0], [43.6, 490.0], [43.7, 491.0], [43.8, 493.0], [43.9, 495.0], [44.0, 497.0], [44.1, 498.0], [44.2, 500.0], [44.3, 502.0], [44.4, 504.0], [44.5, 505.0], [44.6, 507.0], [44.7, 509.0], [44.8, 510.0], [44.9, 512.0], [45.0, 514.0], [45.1, 516.0], [45.2, 518.0], [45.3, 519.0], [45.4, 521.0], [45.5, 523.0], [45.6, 524.0], [45.7, 526.0], [45.8, 528.0], [45.9, 529.0], [46.0, 531.0], [46.1, 533.0], [46.2, 535.0], [46.3, 537.0], [46.4, 538.0], [46.5, 540.0], [46.6, 542.0], [46.7, 544.0], [46.8, 546.0], [46.9, 547.0], [47.0, 549.0], [47.1, 551.0], [47.2, 552.0], [47.3, 554.0], [47.4, 556.0], [47.5, 558.0], [47.6, 560.0], [47.7, 562.0], [47.8, 563.0], [47.9, 565.0], [48.0, 567.0], [48.1, 568.0], [48.2, 570.0], [48.3, 572.0], [48.4, 574.0], [48.5, 576.0], [48.6, 578.0], [48.7, 579.0], [48.8, 581.0], [48.9, 583.0], [49.0, 585.0], [49.1, 587.0], [49.2, 589.0], [49.3, 590.0], [49.4, 592.0], [49.5, 594.0], [49.6, 596.0], [49.7, 598.0], [49.8, 600.0], [49.9, 602.0], [50.0, 604.0], [50.1, 605.0], [50.2, 607.0], [50.3, 609.0], [50.4, 611.0], [50.5, 613.0], [50.6, 615.0], [50.7, 617.0], [50.8, 619.0], [50.9, 621.0], [51.0, 623.0], [51.1, 625.0], [51.2, 627.0], [51.3, 629.0], [51.4, 631.0], [51.5, 633.0], [51.6, 634.0], [51.7, 636.0], [51.8, 638.0], [51.9, 640.0], [52.0, 643.0], [52.1, 644.0], [52.2, 646.0], [52.3, 648.0], [52.4, 650.0], [52.5, 652.0], [52.6, 654.0], [52.7, 656.0], [52.8, 658.0], [52.9, 660.0], [53.0, 662.0], [53.1, 664.0], [53.2, 666.0], [53.3, 669.0], [53.4, 670.0], [53.5, 673.0], [53.6, 675.0], [53.7, 677.0], [53.8, 679.0], [53.9, 681.0], [54.0, 683.0], [54.1, 685.0], [54.2, 687.0], [54.3, 689.0], [54.4, 692.0], [54.5, 694.0], [54.6, 696.0], [54.7, 698.0], [54.8, 700.0], [54.9, 702.0], [55.0, 705.0], [55.1, 706.0], [55.2, 709.0], [55.3, 711.0], [55.4, 713.0], [55.5, 715.0], [55.6, 717.0], [55.7, 719.0], [55.8, 721.0], [55.9, 724.0], [56.0, 726.0], [56.1, 728.0], [56.2, 730.0], [56.3, 732.0], [56.4, 735.0], [56.5, 737.0], [56.6, 739.0], [56.7, 742.0], [56.8, 744.0], [56.9, 746.0], [57.0, 748.0], [57.1, 751.0], [57.2, 753.0], [57.3, 755.0], [57.4, 757.0], [57.5, 760.0], [57.6, 762.0], [57.7, 765.0], [57.8, 767.0], [57.9, 769.0], [58.0, 772.0], [58.1, 775.0], [58.2, 777.0], [58.3, 779.0], [58.4, 781.0], [58.5, 784.0], [58.6, 786.0], [58.7, 788.0], [58.8, 790.0], [58.9, 793.0], [59.0, 795.0], [59.1, 798.0], [59.2, 800.0], [59.3, 802.0], [59.4, 805.0], [59.5, 807.0], [59.6, 810.0], [59.7, 812.0], [59.8, 814.0], [59.9, 816.0], [60.0, 819.0], [60.1, 821.0], [60.2, 824.0], [60.3, 826.0], [60.4, 829.0], [60.5, 832.0], [60.6, 834.0], [60.7, 836.0], [60.8, 839.0], [60.9, 841.0], [61.0, 844.0], [61.1, 846.0], [61.2, 849.0], [61.3, 851.0], [61.4, 853.0], [61.5, 856.0], [61.6, 858.0], [61.7, 861.0], [61.8, 864.0], [61.9, 866.0], [62.0, 868.0], [62.1, 871.0], [62.2, 874.0], [62.3, 877.0], [62.4, 879.0], [62.5, 882.0], [62.6, 884.0], [62.7, 887.0], [62.8, 890.0], [62.9, 892.0], [63.0, 895.0], [63.1, 898.0], [63.2, 900.0], [63.3, 903.0], [63.4, 906.0], [63.5, 909.0], [63.6, 911.0], [63.7, 914.0], [63.8, 917.0], [63.9, 919.0], [64.0, 922.0], [64.1, 925.0], [64.2, 928.0], [64.3, 930.0], [64.4, 933.0], [64.5, 936.0], [64.6, 939.0], [64.7, 941.0], [64.8, 944.0], [64.9, 947.0], [65.0, 949.0], [65.1, 952.0], [65.2, 955.0], [65.3, 958.0], [65.4, 961.0], [65.5, 964.0], [65.6, 967.0], [65.7, 969.0], [65.8, 972.0], [65.9, 975.0], [66.0, 978.0], [66.1, 981.0], [66.2, 984.0], [66.3, 987.0], [66.4, 990.0], [66.5, 993.0], [66.6, 996.0], [66.7, 999.0], [66.8, 1002.0], [66.9, 1004.0], [67.0, 1007.0], [67.1, 1010.0], [67.2, 1013.0], [67.3, 1016.0], [67.4, 1018.0], [67.5, 1022.0], [67.6, 1024.0], [67.7, 1027.0], [67.8, 1030.0], [67.9, 1033.0], [68.0, 1036.0], [68.1, 1038.0], [68.2, 1041.0], [68.3, 1044.0], [68.4, 1047.0], [68.5, 1050.0], [68.6, 1053.0], [68.7, 1056.0], [68.8, 1060.0], [68.9, 1063.0], [69.0, 1065.0], [69.1, 1068.0], [69.2, 1071.0], [69.3, 1074.0], [69.4, 1077.0], [69.5, 1080.0], [69.6, 1083.0], [69.7, 1086.0], [69.8, 1089.0], [69.9, 1092.0], [70.0, 1095.0], [70.1, 1098.0], [70.2, 1101.0], [70.3, 1104.0], [70.4, 1107.0], [70.5, 1111.0], [70.6, 1114.0], [70.7, 1117.0], [70.8, 1121.0], [70.9, 1124.0], [71.0, 1128.0], [71.1, 1132.0], [71.2, 1136.0], [71.3, 1139.0], [71.4, 1142.0], [71.5, 1145.0], [71.6, 1149.0], [71.7, 1153.0], [71.8, 1156.0], [71.9, 1159.0], [72.0, 1163.0], [72.1, 1167.0], [72.2, 1170.0], [72.3, 1174.0], [72.4, 1178.0], [72.5, 1182.0], [72.6, 1185.0], [72.7, 1189.0], [72.8, 1192.0], [72.9, 1196.0], [73.0, 1200.0], [73.1, 1204.0], [73.2, 1208.0], [73.3, 1212.0], [73.4, 1216.0], [73.5, 1219.0], [73.6, 1224.0], [73.7, 1227.0], [73.8, 1231.0], [73.9, 1235.0], [74.0, 1239.0], [74.1, 1243.0], [74.2, 1247.0], [74.3, 1251.0], [74.4, 1255.0], [74.5, 1259.0], [74.6, 1263.0], [74.7, 1267.0], [74.8, 1270.0], [74.9, 1275.0], [75.0, 1279.0], [75.1, 1283.0], [75.2, 1287.0], [75.3, 1291.0], [75.4, 1295.0], [75.5, 1299.0], [75.6, 1303.0], [75.7, 1308.0], [75.8, 1312.0], [75.9, 1316.0], [76.0, 1321.0], [76.1, 1326.0], [76.2, 1330.0], [76.3, 1335.0], [76.4, 1340.0], [76.5, 1344.0], [76.6, 1349.0], [76.7, 1354.0], [76.8, 1358.0], [76.9, 1363.0], [77.0, 1368.0], [77.1, 1372.0], [77.2, 1377.0], [77.3, 1381.0], [77.4, 1386.0], [77.5, 1390.0], [77.6, 1395.0], [77.7, 1400.0], [77.8, 1406.0], [77.9, 1410.0], [78.0, 1415.0], [78.1, 1420.0], [78.2, 1425.0], [78.3, 1429.0], [78.4, 1434.0], [78.5, 1440.0], [78.6, 1446.0], [78.7, 1452.0], [78.8, 1457.0], [78.9, 1461.0], [79.0, 1467.0], [79.1, 1472.0], [79.2, 1477.0], [79.3, 1482.0], [79.4, 1488.0], [79.5, 1494.0], [79.6, 1500.0], [79.7, 1505.0], [79.8, 1510.0], [79.9, 1516.0], [80.0, 1522.0], [80.1, 1527.0], [80.2, 1532.0], [80.3, 1538.0], [80.4, 1543.0], [80.5, 1549.0], [80.6, 1555.0], [80.7, 1560.0], [80.8, 1566.0], [80.9, 1571.0], [81.0, 1578.0], [81.1, 1583.0], [81.2, 1589.0], [81.3, 1595.0], [81.4, 1601.0], [81.5, 1607.0], [81.6, 1613.0], [81.7, 1618.0], [81.8, 1624.0], [81.9, 1631.0], [82.0, 1636.0], [82.1, 1643.0], [82.2, 1649.0], [82.3, 1656.0], [82.4, 1664.0], [82.5, 1671.0], [82.6, 1678.0], [82.7, 1685.0], [82.8, 1691.0], [82.9, 1698.0], [83.0, 1705.0], [83.1, 1712.0], [83.2, 1719.0], [83.3, 1726.0], [83.4, 1732.0], [83.5, 1739.0], [83.6, 1746.0], [83.7, 1753.0], [83.8, 1760.0], [83.9, 1766.0], [84.0, 1773.0], [84.1, 1781.0], [84.2, 1788.0], [84.3, 1794.0], [84.4, 1801.0], [84.5, 1808.0], [84.6, 1815.0], [84.7, 1822.0], [84.8, 1830.0], [84.9, 1837.0], [85.0, 1844.0], [85.1, 1851.0], [85.2, 1859.0], [85.3, 1867.0], [85.4, 1875.0], [85.5, 1883.0], [85.6, 1891.0], [85.7, 1899.0], [85.8, 1908.0], [85.9, 1916.0], [86.0, 1924.0], [86.1, 1933.0], [86.2, 1942.0], [86.3, 1950.0], [86.4, 1958.0], [86.5, 1967.0], [86.6, 1975.0], [86.7, 1984.0], [86.8, 1995.0], [86.9, 2003.0], [87.0, 2013.0], [87.1, 2022.0], [87.2, 2032.0], [87.3, 2041.0], [87.4, 2050.0], [87.5, 2059.0], [87.6, 2069.0], [87.7, 2078.0], [87.8, 2087.0], [87.9, 2096.0], [88.0, 2106.0], [88.1, 2117.0], [88.2, 2128.0], [88.3, 2138.0], [88.4, 2149.0], [88.5, 2159.0], [88.6, 2170.0], [88.7, 2181.0], [88.8, 2191.0], [88.9, 2202.0], [89.0, 2212.0], [89.1, 2223.0], [89.2, 2232.0], [89.3, 2242.0], [89.4, 2253.0], [89.5, 2264.0], [89.6, 2274.0], [89.7, 2286.0], [89.8, 2297.0], [89.9, 2308.0], [90.0, 2320.0], [90.1, 2332.0], [90.2, 2342.0], [90.3, 2352.0], [90.4, 2364.0], [90.5, 2376.0], [90.6, 2389.0], [90.7, 2401.0], [90.8, 2411.0], [90.9, 2424.0], [91.0, 2436.0], [91.1, 2448.0], [91.2, 2460.0], [91.3, 2473.0], [91.4, 2486.0], [91.5, 2498.0], [91.6, 2510.0], [91.7, 2524.0], [91.8, 2536.0], [91.9, 2548.0], [92.0, 2560.0], [92.1, 2571.0], [92.2, 2584.0], [92.3, 2598.0], [92.4, 2610.0], [92.5, 2624.0], [92.6, 2639.0], [92.7, 2652.0], [92.8, 2666.0], [92.9, 2681.0], [93.0, 2696.0], [93.1, 2713.0], [93.2, 2731.0], [93.3, 2748.0], [93.4, 2765.0], [93.5, 2783.0], [93.6, 2805.0], [93.7, 2825.0], [93.8, 2846.0], [93.9, 2863.0], [94.0, 2883.0], [94.1, 2901.0], [94.2, 2920.0], [94.3, 2941.0], [94.4, 2962.0], [94.5, 2981.0], [94.6, 2999.0], [94.7, 3020.0], [94.8, 3044.0], [94.9, 3067.0], [95.0, 3090.0], [95.1, 3111.0], [95.2, 3132.0], [95.3, 3157.0], [95.4, 3180.0], [95.5, 3204.0], [95.6, 3231.0], [95.7, 3260.0], [95.8, 3285.0], [95.9, 3311.0], [96.0, 3340.0], [96.1, 3368.0], [96.2, 3397.0], [96.3, 3425.0], [96.4, 3452.0], [96.5, 3482.0], [96.6, 3514.0], [96.7, 3545.0], [96.8, 3576.0], [96.9, 3611.0], [97.0, 3647.0], [97.1, 3689.0], [97.2, 3733.0], [97.3, 3776.0], [97.4, 3818.0], [97.5, 3861.0], [97.6, 3906.0], [97.7, 3951.0], [97.8, 4004.0], [97.9, 4057.0], [98.0, 4107.0], [98.1, 4156.0], [98.2, 4210.0], [98.3, 4280.0], [98.4, 4359.0], [98.5, 4439.0], [98.6, 4528.0], [98.7, 4619.0], [98.8, 4727.0], [98.9, 4860.0], [99.0, 5027.0], [99.1, 5218.0], [99.2, 5496.0], [99.3, 6079.0], [99.4, 7028.0], [99.5, 8374.0], [99.6, 9874.0], [99.7, 23712.0], [99.8, 37720.0], [99.9, 46085.0], [100.0, 67451.0]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 35252.0, "series": [{"data": [[0.0, 35252.0], [100.0, 19104.0], [32900.0, 2.0], [33700.0, 1.0], [35300.0, 3.0], [36100.0, 5.0], [38500.0, 2.0], [37700.0, 1.0], [39300.0, 4.0], [40100.0, 2.0], [40900.0, 2.0], [42500.0, 2.0], [41700.0, 1.0], [44900.0, 7.0], [44100.0, 2.0], [43300.0, 1.0], [45700.0, 6.0], [46500.0, 2.0], [47300.0, 1.0], [48900.0, 2.0], [50500.0, 3.0], [200.0, 15906.0], [52900.0, 2.0], [51300.0, 1.0], [53700.0, 1.0], [54500.0, 1.0], [55300.0, 2.0], [58500.0, 3.0], [60900.0, 1.0], [64100.0, 1.0], [67400.0, 1.0], [300.0, 14578.0], [400.0, 13693.0], [500.0, 12566.0], [600.0, 11084.0], [700.0, 9885.0], [800.0, 8917.0], [900.0, 7902.0], [1000.0, 7630.0], [1100.0, 6335.0], [1200.0, 5637.0], [1300.0, 4858.0], [1400.0, 4252.0], [1500.0, 3988.0], [1600.0, 3431.0], [1700.0, 3257.0], [1800.0, 2971.0], [1900.0, 2570.0], [2000.0, 2375.0], [2100.0, 2126.0], [2300.0, 1926.0], [2200.0, 2105.0], [2400.0, 1860.0], [2500.0, 1788.0], [2600.0, 1562.0], [2700.0, 1244.0], [2800.0, 1155.0], [2900.0, 1130.0], [3000.0, 987.0], [3100.0, 976.0], [3300.0, 784.0], [3200.0, 847.0], [3400.0, 764.0], [3500.0, 696.0], [3700.0, 521.0], [3600.0, 575.0], [3800.0, 511.0], [3900.0, 465.0], [4000.0, 428.0], [4100.0, 442.0], [4200.0, 328.0], [4300.0, 279.0], [4600.0, 223.0], [4500.0, 251.0], [4400.0, 250.0], [4800.0, 144.0], [4700.0, 170.0], [4900.0, 132.0], [5000.0, 138.0], [5100.0, 104.0], [5300.0, 84.0], [5200.0, 109.0], [5400.0, 58.0], [5500.0, 61.0], [5600.0, 44.0], [5800.0, 29.0], [5700.0, 46.0], [5900.0, 16.0], [6000.0, 34.0], [6100.0, 27.0], [6300.0, 17.0], [6200.0, 15.0], [6500.0, 45.0], [6400.0, 35.0], [6600.0, 35.0], [6800.0, 15.0], [6900.0, 10.0], [6700.0, 12.0], [7000.0, 19.0], [7100.0, 10.0], [7400.0, 9.0], [7200.0, 12.0], [7300.0, 12.0], [7600.0, 9.0], [7500.0, 13.0], [7900.0, 14.0], [7700.0, 17.0], [7800.0, 8.0], [8100.0, 26.0], [8000.0, 10.0], [8200.0, 49.0], [8600.0, 24.0], [8400.0, 21.0], [9200.0, 14.0], [8800.0, 10.0], [9000.0, 4.0], [9400.0, 11.0], [9600.0, 12.0], [10000.0, 9.0], [9800.0, 10.0], [10200.0, 8.0], [10400.0, 4.0], [10600.0, 2.0], [11200.0, 9.0], [11000.0, 3.0], [10800.0, 3.0], [11400.0, 6.0], [11600.0, 2.0], [11800.0, 2.0], [12200.0, 2.0], [12000.0, 3.0], [12400.0, 2.0], [12600.0, 1.0], [12800.0, 1.0], [13000.0, 3.0], [13600.0, 1.0], [14600.0, 2.0], [14400.0, 1.0], [14800.0, 2.0], [15200.0, 5.0], [15000.0, 1.0], [15400.0, 1.0], [16000.0, 1.0], [17200.0, 1.0], [16400.0, 2.0], [17600.0, 1.0], [18800.0, 1.0], [20400.0, 2.0], [20800.0, 1.0], [21200.0, 2.0], [21600.0, 3.0], [24400.0, 2.0], [23600.0, 1.0], [25200.0, 1.0], [24800.0, 2.0], [26400.0, 1.0], [25600.0, 1.0], [27600.0, 2.0], [26800.0, 1.0], [27200.0, 1.0], [28000.0, 3.0], [28400.0, 1.0], [29200.0, 1.0], [28800.0, 2.0], [30000.0, 1.0], [30400.0, 2.0], [30800.0, 4.0], [31200.0, 3.0], [31600.0, 5.0], [32000.0, 3.0], [32800.0, 2.0], [34400.0, 1.0], [36000.0, 1.0], [35200.0, 1.0], [38400.0, 2.0], [37600.0, 2.0], [40800.0, 1.0], [39200.0, 2.0], [40000.0, 1.0], [41600.0, 1.0], [42400.0, 1.0], [43200.0, 4.0], [44800.0, 1.0], [45600.0, 4.0], [46400.0, 6.0], [48000.0, 2.0], [47200.0, 1.0], [48800.0, 2.0], [49600.0, 5.0], [51200.0, 1.0], [55200.0, 2.0], [54400.0, 1.0], [56000.0, 4.0], [56800.0, 2.0], [58400.0, 3.0], [59200.0, 1.0], [60000.0, 1.0], [64800.0, 1.0], [33900.0, 2.0], [33100.0, 1.0], [35500.0, 2.0], [36300.0, 2.0], [37100.0, 4.0], [37900.0, 4.0], [38700.0, 2.0], [39500.0, 4.0], [40300.0, 1.0], [41900.0, 4.0], [42700.0, 4.0], [43500.0, 2.0], [44300.0, 6.0], [46700.0, 2.0], [45100.0, 3.0], [45900.0, 3.0], [48300.0, 7.0], [49100.0, 1.0], [47500.0, 1.0], [49900.0, 5.0], [50700.0, 4.0], [53100.0, 1.0], [52300.0, 1.0], [53900.0, 1.0], [54700.0, 1.0], [56300.0, 1.0], [58700.0, 1.0], [61100.0, 1.0], [16500.0, 2.0], [16900.0, 1.0], [17700.0, 2.0], [18900.0, 1.0], [18500.0, 1.0], [20100.0, 4.0], [19700.0, 2.0], [20500.0, 4.0], [20900.0, 1.0], [22100.0, 2.0], [21700.0, 1.0], [23300.0, 1.0], [23700.0, 2.0], [24500.0, 3.0], [25300.0, 1.0], [26100.0, 1.0], [26500.0, 3.0], [27300.0, 1.0], [28100.0, 2.0], [28500.0, 1.0], [27700.0, 2.0], [29300.0, 1.0], [30100.0, 1.0], [30500.0, 1.0], [31300.0, 2.0], [30900.0, 1.0], [31700.0, 2.0], [32100.0, 7.0], [33000.0, 3.0], [36200.0, 4.0], [37000.0, 6.0], [37800.0, 3.0], [38600.0, 1.0], [39400.0, 2.0], [40200.0, 2.0], [42600.0, 1.0], [45000.0, 4.0], [43400.0, 6.0], [44200.0, 5.0], [46600.0, 4.0], [45800.0, 1.0], [48200.0, 1.0], [47400.0, 1.0], [49000.0, 5.0], [49800.0, 2.0], [50600.0, 3.0], [51400.0, 2.0], [53800.0, 1.0], [54600.0, 1.0], [56200.0, 3.0], [57000.0, 1.0], [55400.0, 1.0], [58600.0, 1.0], [64200.0, 2.0], [33300.0, 1.0], [34100.0, 1.0], [34900.0, 5.0], [36500.0, 1.0], [37300.0, 5.0], [38900.0, 3.0], [38100.0, 5.0], [39700.0, 3.0], [40500.0, 2.0], [41300.0, 1.0], [42900.0, 1.0], [43700.0, 3.0], [44500.0, 1.0], [45300.0, 7.0], [46100.0, 2.0], [46900.0, 2.0], [47700.0, 2.0], [48500.0, 6.0], [50100.0, 4.0], [49300.0, 4.0], [52500.0, 1.0], [51700.0, 1.0], [54900.0, 1.0], [55700.0, 2.0], [57300.0, 1.0], [58100.0, 2.0], [8700.0, 20.0], [8300.0, 29.0], [8500.0, 25.0], [9100.0, 14.0], [8900.0, 12.0], [9300.0, 12.0], [9700.0, 17.0], [9500.0, 9.0], [10100.0, 5.0], [9900.0, 6.0], [10300.0, 8.0], [10700.0, 4.0], [10500.0, 3.0], [10900.0, 6.0], [11100.0, 3.0], [11300.0, 5.0], [11700.0, 4.0], [11500.0, 3.0], [11900.0, 2.0], [12100.0, 4.0], [12300.0, 3.0], [12500.0, 1.0], [13700.0, 1.0], [14100.0, 8.0], [14500.0, 3.0], [15300.0, 2.0], [14900.0, 2.0], [15100.0, 4.0], [15700.0, 1.0], [15900.0, 3.0], [16100.0, 1.0], [17000.0, 1.0], [18200.0, 2.0], [18600.0, 2.0], [19800.0, 1.0], [20600.0, 1.0], [21400.0, 2.0], [22200.0, 2.0], [23400.0, 1.0], [22600.0, 1.0], [23000.0, 1.0], [24200.0, 1.0], [23800.0, 3.0], [25000.0, 3.0], [26200.0, 1.0], [26600.0, 4.0], [27800.0, 2.0], [28200.0, 4.0], [28600.0, 1.0], [29400.0, 1.0], [29800.0, 3.0], [30600.0, 1.0], [31800.0, 4.0], [32600.0, 2.0], [32200.0, 5.0], [33200.0, 3.0], [35600.0, 6.0], [38800.0, 2.0], [38000.0, 6.0], [37200.0, 2.0], [40400.0, 1.0], [39600.0, 1.0], [42000.0, 2.0], [42800.0, 6.0], [44400.0, 4.0], [45200.0, 3.0], [46800.0, 2.0], [46000.0, 6.0], [47600.0, 1.0], [48400.0, 1.0], [50000.0, 5.0], [50800.0, 4.0], [49200.0, 1.0], [52400.0, 1.0], [57200.0, 2.0], [56400.0, 1.0], [58000.0, 4.0], [65200.0, 1.0], [33500.0, 3.0], [34300.0, 2.0], [35100.0, 2.0], [36700.0, 1.0], [35900.0, 3.0], [37500.0, 3.0], [38300.0, 3.0], [39100.0, 2.0], [39900.0, 1.0], [40700.0, 1.0], [41500.0, 5.0], [43100.0, 5.0], [43900.0, 18.0], [44700.0, 3.0], [45500.0, 4.0], [46300.0, 3.0], [47100.0, 6.0], [48700.0, 5.0], [47900.0, 3.0], [49500.0, 2.0], [50300.0, 4.0], [51100.0, 3.0], [55100.0, 1.0], [55900.0, 3.0], [56700.0, 1.0], [58300.0, 1.0], [59100.0, 1.0], [17100.0, 1.0], [16700.0, 1.0], [17500.0, 1.0], [18300.0, 1.0], [18700.0, 1.0], [19900.0, 3.0], [19500.0, 1.0], [21500.0, 1.0], [20700.0, 1.0], [22700.0, 1.0], [23500.0, 2.0], [25100.0, 2.0], [24700.0, 1.0], [26300.0, 1.0], [27100.0, 4.0], [27900.0, 2.0], [28700.0, 2.0], [29500.0, 3.0], [30700.0, 4.0], [30300.0, 1.0], [31500.0, 2.0], [31100.0, 1.0], [31900.0, 3.0], [32700.0, 1.0], [32300.0, 4.0], [33400.0, 3.0], [34200.0, 1.0], [35000.0, 2.0], [36600.0, 1.0], [35800.0, 1.0], [38200.0, 1.0], [37400.0, 2.0], [39000.0, 2.0], [39800.0, 3.0], [40600.0, 1.0], [43000.0, 3.0], [41400.0, 1.0], [43800.0, 2.0], [44600.0, 1.0], [45400.0, 6.0], [47000.0, 6.0], [46200.0, 3.0], [47800.0, 4.0], [48600.0, 2.0], [50200.0, 4.0], [49400.0, 1.0], [51000.0, 2.0], [52600.0, 1.0], [51800.0, 1.0], [55000.0, 2.0], [56600.0, 2.0], [58200.0, 1.0], [57400.0, 2.0]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 67400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5585.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 95583.0, "series": [{"data": [[1.0, 77447.0]], "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[3.0, 5585.0]], "isOverall": false, "label": "Requests in error", "isController": false}, {"data": [[0.0, 95583.0]], "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[2.0, 44521.0]], "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1024.249909926141, "minX": 1.54979238E12, "maxY": 1376.5647288638856, "series": [{"data": [[1.54979274E12, 1359.3005761570053], [1.54979244E12, 1376.5647288638856], [1.54979238E12, 1024.249909926141], [1.54979268E12, 1059.5835155652765]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54979274E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.5, "minX": 1.0, "maxY": 4278.133333333332, "series": [{"data": [[2.0, 4.0], [3.0, 3.76], [4.0, 4.333333333333333], [5.0, 5.000000000000001], [6.0, 5.58139534883721], [7.0, 6.0], [8.0, 7.341463414634146], [9.0, 8.224999999999996], [10.0, 9.340909090909092], [11.0, 10.270270270270272], [12.0, 11.029411764705882], [13.0, 11.194444444444446], [14.0, 13.451612903225808], [15.0, 10.974358974358974], [16.0, 13.791666666666668], [17.0, 16.16216216216216], [18.0, 16.0], [19.0, 16.774193548387093], [20.0, 15.874999999999998], [21.0, 18.31578947368422], [22.0, 19.882352941176464], [23.0, 18.89189189189189], [24.0, 20.5625], [25.0, 20.08333333333333], [26.0, 25.23809523809524], [27.0, 43.21428571428571], [28.0, 46.95744680851063], [29.0, 21.43589743589744], [30.0, 23.190476190476193], [31.0, 30.499999999999996], [33.0, 31.77777777777778], [32.0, 27.36585365853659], [35.0, 30.124999999999996], [34.0, 28.414634146341466], [37.0, 36.654545454545456], [36.0, 34.526315789473685], [39.0, 31.025641025641033], [38.0, 31.400000000000006], [41.0, 45.333333333333336], [40.0, 36.13333333333333], [43.0, 44.95], [42.0, 37.25490196078432], [45.0, 167.04081632653055], [44.0, 36.77777777777777], [46.0, 203.17333333333326], [47.0, 41.61702127659575], [48.0, 36.32758620689654], [49.0, 38.72413793103447], [50.0, 43.000000000000014], [51.0, 44.64705882352939], [52.0, 45.191489361702125], [53.0, 53.0576923076923], [54.0, 55.17499999999999], [55.0, 49.96825396825398], [56.0, 61.59523809523809], [57.0, 61.13461538461536], [58.0, 69.19117647058826], [59.0, 54.51162790697675], [60.0, 48.0], [61.0, 53.25000000000001], [62.0, 59.76923076923078], [63.0, 61.6769230769231], [64.0, 64.72500000000001], [65.0, 55.5357142857143], [66.0, 62.098360655737714], [67.0, 82.84000000000002], [68.0, 73.10204081632652], [69.0, 62.88524590163934], [70.0, 70.86666666666667], [71.0, 78.99999999999999], [72.0, 67.45454545454545], [73.0, 84.60714285714286], [74.0, 71.99999999999999], [75.0, 66.78947368421055], [76.0, 62.737704918032776], [77.0, 58.86046511627907], [78.0, 76.61971830985917], [79.0, 70.18867924528303], [80.0, 80.24137931034484], [81.0, 79.39285714285714], [82.0, 74.0], [83.0, 67.24590163934428], [84.0, 83.99999999999997], [85.0, 82.52542372881354], [86.0, 76.40000000000002], [87.0, 79.63636363636363], [88.0, 87.32692307692307], [89.0, 75.32727272727271], [90.0, 64.59615384615384], [91.0, 87.60416666666666], [92.0, 68.13636363636364], [93.0, 96.7], [94.0, 106.46153846153845], [95.0, 106.24999999999999], [96.0, 86.70212765957446], [97.0, 81.47058823529413], [98.0, 81.93589743589746], [99.0, 86.75675675675673], [100.0, 81.32758620689657], [101.0, 86.94642857142857], [102.0, 86.7721518987342], [103.0, 94.84415584415584], [104.0, 95.24074074074075], [105.0, 89.188679245283], [106.0, 94.15714285714287], [107.0, 115.74074074074076], [108.0, 125.13043478260866], [109.0, 108.85714285714286], [110.0, 99.17391304347825], [111.0, 112.96774193548386], [112.0, 102.57692307692305], [113.0, 113.82716049382718], [114.0, 100.42647058823529], [115.0, 107.29113924050633], [116.0, 69.23255813953489], [117.0, 89.76470588235296], [118.0, 93.09302325581395], [119.0, 101.63768115942027], [120.0, 109.54999999999998], [121.0, 102.75471698113206], [122.0, 123.75], [123.0, 111.05999999999997], [124.0, 105.30555555555556], [125.0, 127.72058823529412], [126.0, 115.14583333333334], [127.0, 157.14634146341464], [128.0, 131.47058823529412], [129.0, 134.17948717948718], [130.0, 113.0181818181818], [131.0, 114.77464788732392], [132.0, 110.52941176470593], [133.0, 122.16326530612243], [134.0, 103.81818181818183], [135.0, 113.75862068965517], [136.0, 119.31999999999998], [137.0, 122.43333333333334], [138.0, 112.56666666666666], [139.0, 147.3404255319149], [140.0, 117.6], [141.0, 151.84057971014485], [142.0, 165.10416666666674], [143.0, 113.64], [144.0, 136.1323529411765], [145.0, 138.92307692307693], [146.0, 119.5238095238095], [147.0, 113.90277777777781], [148.0, 97.2439024390244], [149.0, 156.57746478873239], [150.0, 132.8974358974359], [151.0, 152.37500000000006], [152.0, 120.26190476190474], [153.0, 134.90769230769234], [154.0, 135.98181818181817], [155.0, 148.6304347826087], [156.0, 138.55384615384625], [157.0, 151.6785714285714], [158.0, 180.82812500000003], [159.0, 128.98245614035088], [160.0, 133.68], [161.0, 160.5434782608696], [162.0, 137.77272727272728], [163.0, 151.8771929824562], [164.0, 145.58904109589042], [165.0, 196.77272727272734], [166.0, 190.7021276595745], [167.0, 138.830985915493], [168.0, 178.87234042553195], [169.0, 193.91935483870972], [170.0, 162.19565217391303], [171.0, 163.12962962962962], [172.0, 135.19298245614044], [173.0, 152.10204081632654], [174.0, 161.4150943396226], [175.0, 163.97826086956522], [176.0, 189.53424657534245], [177.0, 176.67605633802816], [178.0, 192.51282051282053], [179.0, 151.3409090909091], [180.0, 191.4736842105263], [181.0, 169.83050847457622], [182.0, 170.98148148148144], [183.0, 129.1063829787234], [184.0, 174.6734693877551], [185.0, 204.33870967741936], [186.0, 231.36585365853657], [187.0, 168.04999999999995], [188.0, 143.28260869565221], [189.0, 161.84126984126988], [190.0, 155.41509433962264], [191.0, 154.89473684210532], [192.0, 156.38095238095238], [193.0, 139.12499999999994], [194.0, 157.89130434782606], [195.0, 149.0612244897959], [196.0, 143.13333333333333], [197.0, 136.06060606060603], [198.0, 226.46590909090904], [199.0, 219.39449541284398], [200.0, 240.45098039215696], [201.0, 160.60526315789474], [202.0, 231.61904761904768], [203.0, 233.30158730158738], [204.0, 193.73214285714283], [205.0, 202.77777777777771], [206.0, 187.9253731343284], [207.0, 211.43181818181824], [208.0, 179.6764705882353], [209.0, 203.98360655737707], [210.0, 174.8], [211.0, 207.72368421052636], [212.0, 195.34482758620695], [213.0, 214.29268292682923], [214.0, 199.875], [215.0, 212.3134328358209], [216.0, 271.10204081632656], [219.0, 227.62745098039215], [220.0, 229.65957446808508], [221.0, 193.3225806451613], [222.0, 225.6176470588235], [223.0, 185.58823529411762], [218.0, 178.15625], [217.0, 197.69565217391306], [224.0, 205.6904761904762], [225.0, 152.91666666666669], [226.0, 306.3461538461538], [227.0, 268.8108108108108], [228.0, 269.29999999999995], [229.0, 235.00000000000003], [230.0, 218.87142857142857], [231.0, 202.68571428571428], [232.0, 212.94444444444437], [233.0, 193.54999999999995], [234.0, 207.74576271186442], [235.0, 215.65454545454557], [236.0, 211.80000000000004], [237.0, 284.16901408450684], [238.0, 219.1794871794872], [239.0, 216.14754098360646], [240.0, 207.0428571428572], [241.0, 212.81666666666666], [242.0, 189.33333333333331], [243.0, 251.25531914893622], [244.0, 252.78947368421046], [245.0, 167.82456140350882], [246.0, 167.8695652173913], [247.0, 166.28571428571428], [248.0, 256.48484848484856], [249.0, 198.06666666666666], [250.0, 221.68181818181813], [251.0, 291.6833333333333], [252.0, 234.1111111111111], [253.0, 253.26086956521735], [254.0, 216.01298701298708], [255.0, 210.73214285714286], [257.0, 151.05357142857136], [256.0, 175.74999999999997], [258.0, 208.73076923076923], [259.0, 244.25000000000003], [260.0, 241.61818181818182], [261.0, 298.1636363636363], [262.0, 151.10256410256412], [263.0, 165.0357142857143], [264.0, 226.54666666666665], [270.0, 248.31034482758622], [271.0, 246.49999999999994], [268.0, 228.53488372093022], [269.0, 259.06818181818176], [265.0, 233.98113207547163], [266.0, 280.6219512195122], [267.0, 245.8135593220339], [273.0, 281.2], [272.0, 419.31578947368405], [274.0, 341.123287671233], [275.0, 295.3392857142857], [276.0, 358.56], [277.0, 319.10638297872345], [278.0, 285.06493506493507], [279.0, 213.6875], [280.0, 236.4938271604938], [286.0, 254.37313432835816], [287.0, 358.15584415584425], [284.0, 277.9545454545455], [285.0, 261.9240506329114], [281.0, 231.42424242424244], [282.0, 226.9302325581395], [283.0, 217.92307692307696], [289.0, 301.84745762711856], [288.0, 296.0612244897959], [290.0, 238.234375], [291.0, 292.203125], [292.0, 334.52941176470586], [293.0, 320.9464285714286], [294.0, 329.6206896551724], [295.0, 341.69444444444446], [296.0, 342.03921568627453], [302.0, 245.1625], [303.0, 286.12903225806446], [300.0, 350.99999999999994], [301.0, 234.89130434782615], [297.0, 304.5283018867925], [298.0, 240.71929824561394], [299.0, 344.29411764705884], [305.0, 248.11666666666665], [304.0, 245.56140350877192], [306.0, 283.1315789473684], [307.0, 218.83050847457628], [308.0, 258.90540540540553], [309.0, 212.1538461538462], [310.0, 306.09756097560984], [311.0, 224.6266666666667], [312.0, 277.49253731343293], [318.0, 411.304347826087], [319.0, 433.55263157894734], [316.0, 342.5], [317.0, 355.4426229508197], [313.0, 192.70967741935485], [314.0, 240.18644067796612], [315.0, 363.65384615384613], [321.0, 336.67999999999995], [320.0, 448.71428571428567], [322.0, 309.78846153846155], [323.0, 280.15000000000003], [324.0, 386.2711864406779], [325.0, 223.63999999999996], [326.0, 353.5], [327.0, 281.21875], [328.0, 234.86153846153846], [334.0, 344.71428571428584], [335.0, 439.00000000000006], [332.0, 322.19230769230774], [333.0, 320.11764705882337], [329.0, 393.47169811320754], [330.0, 285.21428571428567], [331.0, 249.36923076923077], [337.0, 411.93103448275855], [336.0, 354.1111111111111], [338.0, 299.1851851851851], [339.0, 254.94444444444443], [340.0, 325.2711864406779], [341.0, 583.6037735849055], [342.0, 319.15217391304344], [343.0, 397.7358490566037], [344.0, 353.45098039215696], [350.0, 354.5789473684211], [351.0, 423.01666666666654], [348.0, 284.6666666666667], [349.0, 286.04166666666663], [345.0, 342.56451612903226], [346.0, 300.25], [347.0, 241.41379310344826], [353.0, 585.2978723404254], [352.0, 377.3050847457628], [354.0, 288.78787878787875], [355.0, 267.6888888888889], [356.0, 307.4342105263157], [357.0, 261.1333333333333], [358.0, 289.3333333333333], [359.0, 311.6774193548387], [360.0, 281.3809523809525], [366.0, 274.19117647058823], [367.0, 326.33333333333337], [364.0, 337.0238095238095], [365.0, 279.98245614035085], [361.0, 375.06896551724145], [362.0, 408.6199999999999], [363.0, 412.1500000000001], [369.0, 244.03846153846155], [368.0, 241.42553191489355], [370.0, 344.4444444444444], [371.0, 391.298245614035], [372.0, 329.1666666666667], [373.0, 395.1805555555554], [374.0, 254.55263157894743], [375.0, 246.26470588235296], [376.0, 245.24999999999997], [382.0, 279.7358490566038], [383.0, 322.6718749999999], [380.0, 213.83098591549293], [381.0, 216.5833333333333], [377.0, 254.39772727272708], [378.0, 226.0270270270271], [379.0, 285.35384615384623], [385.0, 256.18181818181813], [384.0, 396.679487179487], [386.0, 280.87142857142857], [387.0, 268.449275362319], [388.0, 445.01388888888874], [389.0, 588.4027777777777], [390.0, 289.7777777777777], [391.0, 215.16279069767444], [392.0, 222.45833333333331], [398.0, 405.42857142857156], [399.0, 390.9622641509434], [396.0, 279.7540983606557], [397.0, 362.0612244897959], [393.0, 207.75], [394.0, 326.29166666666674], [395.0, 309.60377358490564], [403.0, 368.7611940298505], [401.0, 284.23404255319156], [400.0, 367.032967032967], [407.0, 390.2], [406.0, 413.6363636363637], [402.0, 379.2181818181818], [404.0, 432.3898305084746], [405.0, 345.91836734693874], [409.0, 473.4523809523809], [408.0, 436.82051282051293], [414.0, 313.67543859649123], [415.0, 367.43373493975923], [412.0, 409.8750000000001], [413.0, 429.639344262295], [410.0, 417.49315068493127], [411.0, 418.7260273972604], [417.0, 263.6129032258064], [416.0, 356.5121951219512], [418.0, 273.5833333333334], [419.0, 391.10526315789474], [420.0, 346.87804878048775], [421.0, 251.0204081632653], [422.0, 281.027027027027], [423.0, 353.4], [424.0, 253.0555555555556], [430.0, 337.3584905660377], [431.0, 322.38461538461536], [428.0, 292.9864864864865], [429.0, 272.27586206896535], [425.0, 233.82857142857148], [426.0, 299.71052631578954], [427.0, 321.05999999999995], [433.0, 347.59756097560984], [432.0, 344.66], [434.0, 341.17857142857144], [435.0, 390.1975308641974], [436.0, 366.27777777777794], [437.0, 391.52941176470586], [438.0, 364.96000000000004], [439.0, 300.0727272727273], [440.0, 317.42957746478874], [446.0, 273.38333333333327], [447.0, 283.03389830508473], [444.0, 380.7788461538462], [445.0, 252.5416666666667], [441.0, 361.4807692307693], [442.0, 532.8888888888887], [443.0, 465.53846153846155], [449.0, 390.5333333333333], [448.0, 345.78431372549016], [450.0, 437.12857142857143], [451.0, 467.17391304347825], [452.0, 396.6428571428571], [453.0, 365.1632653061224], [454.0, 371.2608695652175], [455.0, 432.59420289855063], [456.0, 443.9999999999999], [462.0, 553.1249999999999], [463.0, 436.22222222222223], [460.0, 461.71666666666675], [461.0, 584.4666666666665], [457.0, 570.2545454545455], [458.0, 264.8541666666668], [459.0, 510.73076923076934], [465.0, 548.2], [464.0, 693.875], [466.0, 592.0937500000002], [467.0, 745.6666666666667], [468.0, 662.5617977528088], [469.0, 466.7032967032967], [470.0, 581.3877551020407], [471.0, 545.4339622641508], [472.0, 507.59405940594064], [478.0, 333.0147058823529], [479.0, 745.2702702702703], [476.0, 496.3636363636364], [477.0, 342.80000000000007], [473.0, 451.0389610389609], [474.0, 383.02197802197793], [475.0, 496.7037037037038], [481.0, 381.5], [480.0, 487.83783783783775], [482.0, 630.5], [483.0, 678.0400000000001], [484.0, 610.3214285714286], [485.0, 529.8125], [486.0, 437.83333333333337], [487.0, 614.6428571428572], [488.0, 361.3157894736843], [494.0, 434.175], [495.0, 351.00000000000006], [492.0, 392.43859649122794], [493.0, 311.078947368421], [489.0, 356.45161290322574], [490.0, 376.30434782608694], [491.0, 426.88235294117646], [497.0, 261.2127659574468], [496.0, 265.0625], [498.0, 297.84615384615387], [499.0, 462.6470588235293], [500.0, 307.37499999999994], [501.0, 367.63934426229514], [502.0, 360.5090909090909], [503.0, 321.625], [504.0, 291.2888888888888], [510.0, 334.7234042553192], [511.0, 442.5970149253732], [508.0, 261.39534883720927], [509.0, 331.9795918367347], [505.0, 376.93749999999994], [506.0, 355.27906976744185], [507.0, 268.204301075269], [515.0, 372.2941176470587], [512.0, 438.2799999999999], [526.0, 494.38571428571436], [527.0, 494.45535714285705], [524.0, 418.15789473684214], [525.0, 409.3921568627451], [522.0, 340.58928571428567], [523.0, 372.43750000000006], [513.0, 316.3506493506493], [514.0, 380.6166666666667], [516.0, 433.3333333333333], [517.0, 453.01818181818186], [518.0, 517.6041666666666], [519.0, 538.1864406779663], [528.0, 451.0379746835443], [542.0, 330.3333333333333], [543.0, 487.4776119402986], [540.0, 553.7727272727274], [541.0, 404.85245901639337], [538.0, 543.3833333333334], [539.0, 503.089552238806], [536.0, 447.0434782608696], [537.0, 538.4893617021277], [529.0, 430.7555555555556], [530.0, 400.38028169014075], [531.0, 477.61538461538476], [532.0, 518.7413793103449], [533.0, 470.62500000000006], [534.0, 511.93333333333356], [535.0, 488.4782608695652], [520.0, 581.8947368421053], [521.0, 486.26562499999994], [547.0, 586.2972972972973], [544.0, 540.9433962264148], [558.0, 543.2702702702704], [559.0, 549.2647058823529], [556.0, 385.7051282051283], [557.0, 463.08955223880594], [554.0, 464.02985074626855], [555.0, 592.0277777777778], [545.0, 396.16666666666663], [546.0, 595.918918918919], [548.0, 578.55], [549.0, 705.1666666666667], [550.0, 516.4285714285713], [551.0, 827.1764705882352], [560.0, 532.2456140350877], [562.0, 555.0500000000001], [561.0, 636.1162790697674], [574.0, 1105.8360655737706], [575.0, 555.4186046511628], [572.0, 442.2619047619047], [573.0, 785.0909090909093], [570.0, 564.9807692307694], [571.0, 624.4461538461538], [568.0, 400.62962962962956], [569.0, 328.37777777777774], [563.0, 520.4600000000003], [564.0, 482.36764705882354], [565.0, 575.4464285714287], [566.0, 555.8688524590162], [567.0, 344.157894736842], [552.0, 769.7586206896553], [553.0, 588.3833333333331], [579.0, 357.07547169811323], [576.0, 481.63636363636357], [590.0, 467.2439024390244], [591.0, 547.4285714285713], [588.0, 498.55128205128204], [589.0, 526.5443037974684], [586.0, 583.9333333333334], [587.0, 601.181818181818], [577.0, 656.5581395348837], [578.0, 435.64150943396226], [580.0, 673.5999999999999], [581.0, 627.5873015873013], [582.0, 588.1304347826089], [583.0, 546.1481481481482], [592.0, 415.2089552238808], [606.0, 712.7560975609756], [607.0, 647.5200000000001], [604.0, 474.9722222222223], [605.0, 593.1627906976743], [602.0, 904.0545454545453], [603.0, 580.8103448275862], [600.0, 611.6530612244898], [601.0, 883.898550724638], [593.0, 647.111111111111], [594.0, 541.1538461538464], [595.0, 515.4411764705882], [596.0, 557.3076923076924], [597.0, 473.75409836065575], [598.0, 682.7543859649123], [599.0, 495.6], [584.0, 467.11111111111114], [585.0, 667.872340425532], [615.0, 498.375], [611.0, 440.77777777777777], [608.0, 616.0357142857142], [618.0, 500.78181818181827], [620.0, 472.0], [619.0, 457.7647058823529], [622.0, 469.00000000000006], [621.0, 759.6896551724137], [623.0, 768.8947368421053], [609.0, 505.08163265306126], [610.0, 545.7068965517241], [612.0, 538.0819672131147], [613.0, 436.16393442622945], [614.0, 392.4772727272728], [624.0, 512.4745762711864], [639.0, 497.1369863013698], [637.0, 624.186046511628], [638.0, 438.608695652174], [634.0, 635.5625], [635.0, 585.0357142857142], [636.0, 441.60526315789474], [632.0, 666.0483870967743], [633.0, 494.05555555555554], [625.0, 746.8225806451611], [626.0, 778.5972222222222], [627.0, 499.2195121951219], [628.0, 485.4736842105263], [629.0, 476.06349206349194], [630.0, 629.6470588235295], [631.0, 726.1568627450979], [616.0, 389.1304347826086], [617.0, 454.11627906976753], [643.0, 563.5490196078431], [640.0, 494.5740740740742], [654.0, 740.217391304348], [655.0, 481.42222222222216], [652.0, 436.8918918918919], [653.0, 493.53999999999996], [650.0, 424.8360655737703], [651.0, 412.7755102040817], [641.0, 611.125], [642.0, 360.1489361702128], [644.0, 522.6202531645571], [645.0, 531.7922077922078], [646.0, 666.655172413793], [647.0, 485.5384615384615], [656.0, 539.1428571428571], [670.0, 339.73770491803265], [671.0, 315.90909090909093], [668.0, 458.6144578313254], [669.0, 416.45569620253184], [666.0, 419.29032258064524], [667.0, 356.8367346938776], [664.0, 459.6212121212122], [665.0, 388.8765432098766], [657.0, 499.63235294117624], [658.0, 392.13461538461513], [659.0, 427.7647058823529], [660.0, 390.9800000000001], [661.0, 483.17073170731703], [662.0, 322.0232558139536], [663.0, 384.6428571428572], [648.0, 490.9722222222221], [649.0, 543.4927536231887], [675.0, 407.3913043478261], [672.0, 402.96774193548384], [686.0, 990.1976744186045], [687.0, 885.1122448979594], [684.0, 510.20833333333326], [685.0, 1065.1333333333332], [682.0, 717.8076923076923], [683.0, 665.952380952381], [673.0, 505.2000000000001], [674.0, 365.0129870129871], [676.0, 560.4492753623188], [677.0, 406.83636363636356], [678.0, 589.029411764706], [679.0, 418.9024390243902], [688.0, 626.2941176470591], [702.0, 687.9047619047619], [703.0, 593.775], [700.0, 447.0], [701.0, 426.84615384615387], [698.0, 663.9555555555555], [699.0, 391.62790697674416], [696.0, 333.94871794871796], [697.0, 446.0465116279069], [689.0, 663.2314814814814], [690.0, 656.6296296296298], [691.0, 596.9999999999998], [692.0, 825.9275362318841], [693.0, 502.0212765957447], [694.0, 619.7499999999998], [695.0, 559.325581395349], [680.0, 581.8000000000001], [681.0, 594.1666666666667], [707.0, 781.2903225806454], [704.0, 403.1063829787234], [718.0, 576.3666666666667], [719.0, 599.8124999999999], [716.0, 541.1730769230769], [717.0, 745.9156626506024], [714.0, 475.6363636363636], [715.0, 668.4583333333334], [705.0, 586.279411764706], [706.0, 542.4852941176471], [708.0, 819.9344262295082], [709.0, 667.5333333333333], [710.0, 586.1020408163266], [711.0, 736.7580645161291], [720.0, 545.4754098360656], [734.0, 741.4489795918367], [735.0, 640.8653846153845], [732.0, 508.89285714285717], [733.0, 881.2558139534882], [730.0, 550.2249999999999], [731.0, 691.8571428571429], [728.0, 725.5882352941177], [729.0, 599.4347826086957], [721.0, 559.5000000000001], [722.0, 555.7843137254902], [723.0, 436.05555555555554], [724.0, 627.4324324324326], [725.0, 387.657894736842], [726.0, 469.93333333333334], [727.0, 474.24999999999994], [712.0, 933.9154929577466], [713.0, 746.396551724138], [739.0, 668.351851851852], [736.0, 674.7608695652175], [750.0, 488.9642857142856], [751.0, 700.0909090909092], [748.0, 889.1379310344827], [749.0, 626.857142857143], [746.0, 837.8333333333334], [747.0, 726.0], [737.0, 642.4285714285714], [738.0, 709.9148936170212], [740.0, 588.4328358208954], [741.0, 583.1016949152541], [742.0, 689.2962962962963], [743.0, 519.7254901960785], [752.0, 670.8823529411764], [766.0, 682.4615384615385], [767.0, 779.9374999999999], [764.0, 483.1428571428571], [765.0, 538.8045977011495], [762.0, 959.5], [763.0, 784.5806451612901], [760.0, 534.9714285714285], [761.0, 470.02631578947376], [753.0, 613.9090909090909], [754.0, 577.4571428571429], [755.0, 668.3823529411764], [756.0, 728.2745098039217], [757.0, 886.5], [758.0, 555.8], [759.0, 639.3589743589745], [744.0, 508.82352941176475], [745.0, 804.0181818181817], [771.0, 757.2597402597406], [768.0, 630.65], [782.0, 538.025641025641], [783.0, 599.5312499999999], [780.0, 621.9878048780486], [781.0, 621.0746268656715], [778.0, 972.4285714285712], [779.0, 669.3703703703704], [769.0, 689.741935483871], [770.0, 970.5625], [772.0, 683.7260273972604], [773.0, 790.172839506173], [774.0, 685.0374999999998], [775.0, 719.8243243243243], [784.0, 896.4693877551018], [798.0, 755.9791666666667], [799.0, 620.3877551020408], [796.0, 756.5428571428572], [797.0, 781.3454545454545], [794.0, 662.1451612903226], [795.0, 698.4000000000001], [792.0, 765.4222222222223], [793.0, 448.4099999999999], [785.0, 562.6923076923076], [786.0, 674.4036697247709], [787.0, 748.7118644067798], [788.0, 714.2115384615387], [789.0, 582.7101449275362], [790.0, 554.2105263157895], [791.0, 596.1780821917808], [776.0, 528.2788461538462], [777.0, 877.0555555555554], [803.0, 575.3461538461538], [800.0, 526.1917808219177], [814.0, 502.9649122807018], [815.0, 581.4354838709679], [812.0, 570.2285714285715], [813.0, 495.9538461538462], [810.0, 436.59375000000006], [811.0, 653.0163934426231], [801.0, 467.8775510204081], [802.0, 507.96116504854393], [804.0, 634.0666666666665], [805.0, 442.75000000000006], [806.0, 290.16071428571433], [807.0, 389.59649122807014], [816.0, 495.2459016393443], [826.0, 874.0], [828.0, 1377.4285714285713], [827.0, 1450.0], [830.0, 1245.6666666666667], [829.0, 1840.6666666666667], [831.0, 755.8333333333334], [824.0, 388.63157894736844], [825.0, 722.2285714285715], [817.0, 619.8750000000001], [818.0, 439.65853658536594], [819.0, 448.8765432098765], [820.0, 505.11666666666673], [821.0, 845.2696629213483], [822.0, 553.7948717948717], [823.0, 672.5633802816901], [808.0, 433.3297872340426], [809.0, 567.9610389610386], [835.0, 1021.25], [832.0, 893.4999999999999], [846.0, 717.0843373493976], [847.0, 988.25], [844.0, 700.5595238095237], [845.0, 797.4354838709678], [842.0, 831.276595744681], [843.0, 925.8666666666666], [833.0, 793.2363636363636], [834.0, 614.3947368421053], [836.0, 2187.7428571428572], [837.0, 914.1384615384615], [838.0, 945.3934426229507], [839.0, 799.1346153846151], [848.0, 885.0576923076925], [849.0, 904.8709677419354], [862.0, 678.8333333333333], [863.0, 563.5490196078432], [860.0, 535.5538461538459], [861.0, 1028.2033898305083], [858.0, 1144.7037037037042], [859.0, 1156.441176470588], [856.0, 576.3275862068964], [857.0, 975.5164835164834], [850.0, 626.5263157894739], [851.0, 1164.2499999999998], [852.0, 1150.7941176470588], [853.0, 1184.5192307692312], [854.0, 919.65625], [855.0, 657.8269230769231], [840.0, 811.6352941176473], [841.0, 925.21978021978], [867.0, 1561.8043478260875], [864.0, 504.43333333333334], [878.0, 828.9705882352944], [879.0, 1014.7101449275362], [876.0, 864.8139534883721], [877.0, 1063.595238095238], [874.0, 2433.187499999999], [875.0, 796.6458333333334], [865.0, 1022.9245283018867], [866.0, 1048.7321428571431], [868.0, 510.9428571428571], [869.0, 753.0384615384614], [870.0, 787.1363636363637], [871.0, 4278.133333333332], [880.0, 1149.2380952380952], [894.0, 667.8301886792452], [895.0, 893.5208333333333], [892.0, 662.8260869565217], [893.0, 998.0727272727269], [890.0, 708.490909090909], [891.0, 733.2105263157894], [888.0, 787.3650793650796], [889.0, 776.2833333333332], [881.0, 845.2142857142857], [882.0, 698.3978494623655], [883.0, 1041.9807692307695], [884.0, 544.7435897435901], [885.0, 882.7142857142857], [886.0, 539.5849056603772], [887.0, 785.2054794520549], [872.0, 2311.137254901961], [873.0, 1376.824561403509], [899.0, 928.6428571428572], [896.0, 725.2916666666667], [910.0, 697.1375000000003], [911.0, 763.1720430107528], [908.0, 608.7096774193546], [909.0, 615.0631578947366], [906.0, 559.3734939759036], [907.0, 723.4157303370787], [897.0, 851.3636363636366], [898.0, 902.9714285714285], [900.0, 616.3947368421052], [901.0, 601.0833333333334], [902.0, 670.8095238095237], [903.0, 659.8474576271188], [912.0, 1041.5822784810127], [926.0, 516.1551724137931], [927.0, 493.35849056603786], [924.0, 620.8478260869565], [925.0, 655.3114754098361], [922.0, 500.9024390243903], [923.0, 477.3918918918919], [920.0, 930.5087719298247], [921.0, 587.3114754098362], [913.0, 875.4098360655738], [914.0, 1002.3800000000002], [915.0, 525.1634615384617], [916.0, 720.0655737704919], [917.0, 747.0485436893202], [918.0, 661.9493670886079], [919.0, 648.1641791044777], [904.0, 544.6052631578947], [905.0, 836.5892857142857], [931.0, 601.98], [928.0, 509.597014925373], [942.0, 450.5], [943.0, 689.7272727272727], [940.0, 492.68674698795166], [941.0, 365.66666666666674], [938.0, 522.6], [939.0, 566.0151515151517], [929.0, 659.796875], [930.0, 371.23287671232885], [932.0, 328.3488372093023], [933.0, 710.4782608695652], [934.0, 610.5], [935.0, 834.7176470588238], [944.0, 606.1304347826087], [958.0, 837.7090909090907], [959.0, 1048.5344827586207], [956.0, 827.5384615384614], [957.0, 724.0277777777778], [954.0, 784.2926829268293], [955.0, 815.7073170731708], [952.0, 715.5384615384613], [953.0, 884.2599999999999], [945.0, 937.0153846153847], [946.0, 1032.8113207547171], [947.0, 646.7179487179487], [948.0, 800.5151515151513], [949.0, 810.4545454545455], [950.0, 779.7777777777778], [951.0, 727.3076923076923], [936.0, 688.4897959183672], [937.0, 641.5769230769229], [963.0, 768.8974358974359], [960.0, 764.9761904761907], [974.0, 575.2345679012345], [975.0, 587.6779661016949], [972.0, 1136.095238095238], [973.0, 828.357142857143], [970.0, 803.9999999999999], [971.0, 813.6666666666671], [961.0, 486.1052631578948], [962.0, 1043.090909090909], [964.0, 978.2727272727273], [965.0, 986.8750000000001], [966.0, 729.6779661016948], [967.0, 1098.7647058823527], [976.0, 946.0000000000001], [990.0, 473.0384615384615], [991.0, 587.875], [988.0, 373.66666666666686], [989.0, 605.9423076923076], [986.0, 770.2948717948716], [987.0, 704.9838709677417], [984.0, 1017.1333333333334], [985.0, 763.4374999999997], [977.0, 607.6470588235293], [978.0, 804.2807017543861], [979.0, 782.3157894736842], [980.0, 945.3650793650793], [981.0, 967.9285714285714], [982.0, 790.1555555555556], [983.0, 974.1777777777779], [968.0, 1069.9622641509434], [969.0, 1025.2083333333333], [995.0, 601.7777777777778], [992.0, 846.8805970149255], [1006.0, 736.4262295081966], [1007.0, 615.4328358208954], [1004.0, 706.2537313432837], [1005.0, 733.1754385964913], [1002.0, 699.6555555555556], [1003.0, 873.2926829268292], [993.0, 742.8974358974358], [994.0, 679.2987012987013], [996.0, 634.5250000000002], [997.0, 757.2758620689655], [998.0, 603.5882352941176], [999.0, 682.5714285714286], [1008.0, 697.8571428571428], [1022.0, 617.4339622641512], [1023.0, 472.347222222222], [1020.0, 459.0000000000001], [1021.0, 887.787234042553], [1018.0, 635.8823529411766], [1019.0, 513.3793103448277], [1016.0, 821.9032258064518], [1017.0, 610.8571428571428], [1009.0, 1127.3194444444446], [1010.0, 794.2142857142857], [1011.0, 430.7709923664122], [1012.0, 384.03296703296724], [1013.0, 508.42647058823513], [1014.0, 542.8799999999999], [1015.0, 597.529411764706], [1000.0, 759.9152542372881], [1001.0, 675.6543209876544], [1036.0, 1027.639534883721], [1050.0, 736.1857142857144], [1032.0, 496.96250000000015], [1024.0, 444.1162790697675], [1026.0, 1064.0588235294117], [1030.0, 611.2727272727273], [1028.0, 750.3809523809524], [1052.0, 419.7321428571429], [1054.0, 832.9019607843138], [1034.0, 617.5125], [1038.0, 705.8], [1072.0, 1344.4810126582279], [1074.0, 1205.8100000000004], [1076.0, 1325.9824561403514], [1078.0, 1131.8082191780827], [1080.0, 914.1428571428571], [1082.0, 1136.9285714285713], [1084.0, 769.8717948717951], [1086.0, 1283.6911764705885], [1058.0, 1024.257142857143], [1056.0, 948.2499999999999], [1060.0, 2230.7], [1062.0, 3996.377358490566], [1064.0, 1304.4901960784314], [1066.0, 1473.0], [1068.0, 657.3846153846154], [1070.0, 1673.9206349206354], [1044.0, 1705.6470588235295], [1042.0, 886.16], [1040.0, 611.0857142857146], [1046.0, 617.4166666666667], [1048.0, 1398.1388888888891], [1094.0, 730.8333333333334], [1088.0, 775.4929577464792], [1116.0, 760.1739130434785], [1118.0, 965.5862068965513], [1112.0, 1138.4473684210527], [1114.0, 1234.8906250000002], [1108.0, 1321.2631578947367], [1110.0, 863.7777777777776], [1090.0, 741.0891089108911], [1092.0, 913.6764705882354], [1096.0, 1002.1975308641979], [1098.0, 1034.8275862068965], [1100.0, 1875.180327868853], [1102.0, 776.5648148148149], [1120.0, 818.9259259259259], [1148.0, 1249.3442622950822], [1150.0, 1240.121212121212], [1144.0, 1675.6992481203006], [1146.0, 1106.0416666666665], [1140.0, 1065.110169491526], [1142.0, 1529.1007751937987], [1136.0, 855.4788732394366], [1138.0, 631.5909090909088], [1122.0, 1312.72131147541], [1124.0, 1005.8611111111109], [1126.0, 1215.1090909090908], [1128.0, 961.1666666666664], [1130.0, 875.139534883721], [1132.0, 532.9791666666666], [1134.0, 1368.3779527559054], [1104.0, 958.2615384615386], [1106.0, 660.6615384615385], [1158.0, 1080.8260869565215], [1152.0, 1704.008695652174], [1180.0, 1100.7692307692305], [1182.0, 609.5428571428574], [1176.0, 619.0], [1178.0, 840.5322580645163], [1172.0, 679.1090909090908], [1174.0, 653.0833333333333], [1154.0, 1238.0520833333333], [1156.0, 1085.4296875000005], [1160.0, 846.1639344262297], [1162.0, 862.7826086956521], [1164.0, 1087.6197183098593], [1166.0, 648.1818181818185], [1184.0, 986.6842105263158], [1212.0, 1035.7307692307695], [1214.0, 945.1612903225806], [1208.0, 791.3962264150944], [1210.0, 819.3518518518517], [1204.0, 629.7619047619047], [1206.0, 809.2786885245903], [1200.0, 832.4375000000001], [1202.0, 791.6666666666667], [1186.0, 1257.5], [1188.0, 725.3793103448276], [1190.0, 640.2173913043479], [1192.0, 915.1666666666665], [1194.0, 988.2592592592592], [1196.0, 1046.8666666666668], [1198.0, 790.2820512820513], [1168.0, 724.5142857142857], [1170.0, 743.5692307692308], [1228.0, 644.3846153846154], [1218.0, 848.1200000000003], [1216.0, 805.3076923076924], [1244.0, 886.1034482758619], [1246.0, 575.7833333333334], [1240.0, 770.5128205128204], [1242.0, 1757.5135135135135], [1236.0, 934.3636363636363], [1238.0, 850.1764705882351], [1220.0, 941.8387096774188], [1222.0, 553.0222222222221], [1224.0, 529.8444444444444], [1226.0, 705.7812499999999], [1230.0, 910.3548387096771], [1266.0, 996.12], [1264.0, 558.8076923076923], [1268.0, 930.4166666666666], [1270.0, 1206.0410958904108], [1272.0, 920.940594059406], [1274.0, 846.4218749999999], [1276.0, 806.1250000000001], [1278.0, 791.7972972972973], [1248.0, 879.4166666666667], [1250.0, 886.8879310344831], [1252.0, 880.2678571428571], [1254.0, 1874.000000000001], [1256.0, 1156.2318840579715], [1258.0, 799.5283018867923], [1262.0, 491.4782608695652], [1260.0, 846.5333333333331], [1232.0, 913.4999999999999], [1234.0, 397.5714285714286], [1286.0, 1475.9999999999998], [1280.0, 1101.2739726027396], [1308.0, 925.28], [1310.0, 1087.8428571428572], [1304.0, 1281.3983050847464], [1306.0, 1320.3626373626373], [1300.0, 1060.876923076923], [1302.0, 1310.6103896103896], [1282.0, 1243.1194029850744], [1284.0, 1126.8433734939763], [1288.0, 1340.9787234042553], [1290.0, 1526.1975308641975], [1292.0, 1269.3538461538465], [1294.0, 1324.5322580645166], [1312.0, 1426.584615384615], [1340.0, 1073.6153846153848], [1342.0, 1242.916666666667], [1336.0, 1172.0882352941178], [1338.0, 402.027027027027], [1332.0, 1170.5614035087722], [1334.0, 1212.4827586206902], [1328.0, 770.6734693877552], [1330.0, 1327.5844155844154], [1314.0, 1262.6833333333334], [1316.0, 1035.0810810810808], [1318.0, 1485.585714285714], [1320.0, 1182.0849056603774], [1322.0, 1009.8260869565216], [1324.0, 1393.884615384616], [1326.0, 1093.8695652173913], [1296.0, 904.5468749999998], [1298.0, 1259.596590909091], [1358.0, 1018.3571428571429], [1350.0, 642.6744186046512], [1344.0, 958.0172413793106], [1372.0, 1281.2499999999998], [1374.0, 1008.872093023256], [1368.0, 786.7341772151898], [1366.0, 1049.9462365591396], [1370.0, 729.2758620689655], [1346.0, 1103.2878787878785], [1348.0, 1136.0338983050847], [1352.0, 1211.9076923076918], [1354.0, 995.6969696969697], [1356.0, 850.344827586207], [1376.0, 673.9090909090911], [1404.0, 753.1153846153845], [1406.0, 666.6379310344828], [1400.0, 870.0405405405404], [1402.0, 690.9180327868852], [1396.0, 1138.0909090909095], [1398.0, 618.1555555555557], [1392.0, 887.3333333333334], [1394.0, 1323.8703703703702], [1378.0, 654.0000000000002], [1380.0, 961.3731343283583], [1382.0, 1242.072727272727], [1384.0, 842.8805970149253], [1386.0, 1151.4634146341466], [1388.0, 1097.4411764705878], [1390.0, 956.3541666666665], [1362.0, 1352.451612903226], [1360.0, 1586.5348837209306], [1364.0, 2097.615384615385], [1414.0, 1159.4137931034486], [1408.0, 653.3661971830987], [1436.0, 1556.4444444444443], [1438.0, 1240.1730769230774], [1432.0, 1424.5], [1434.0, 1146.7333333333333], [1428.0, 962.0975609756097], [1430.0, 1333.6000000000001], [1410.0, 649.7532467532467], [1412.0, 1347.4642857142856], [1416.0, 982.7926829268291], [1418.0, 1062.012658227848], [1420.0, 725.3098591549292], [1422.0, 1038.2207792207796], [1440.0, 1081.4153846153847], [1468.0, 1494.6860465116279], [1470.0, 1021.4090909090907], [1464.0, 935.2023809523808], [1466.0, 1044.318181818182], [1460.0, 984.3333333333335], [1462.0, 907.8877551020407], [1456.0, 981.8051948051949], [1458.0, 1096.2528735632184], [1442.0, 638.3499999999998], [1444.0, 697.8461538461537], [1446.0, 1126.4153846153843], [1448.0, 643.061224489796], [1450.0, 997.8666666666667], [1452.0, 1609.0], [1454.0, 869.2535211267601], [1424.0, 733.11214953271], [1426.0, 1303.582089552239], [1478.0, 1141.648648648649], [1472.0, 835.2718446601938], [1500.0, 1324.913872789952], [1474.0, 907.1967213114757], [1476.0, 972.6428571428573], [1480.0, 1657.4393939393933], [1482.0, 1306.1515151515148], [1484.0, 2275.7600000000007], [1486.0, 1508.3814432989693], [1496.0, 924.2313725490196], [1494.0, 1162.377192982457], [1492.0, 1016.1707317073173], [1490.0, 820.3009708737865], [1488.0, 960.1636363636363], [1498.0, 1023.0576923076924], [1075.0, 850.2394366197184], [1035.0, 927.6283185840708], [1033.0, 754.2812499999998], [1031.0, 882.1627906976746], [1029.0, 1087.9473684210525], [1027.0, 649.2222222222222], [1025.0, 950.2380952380954], [1055.0, 893.0512820512821], [1053.0, 614.8695652173913], [1037.0, 482.4767441860469], [1039.0, 1415.2166666666662], [1045.0, 782.4399999999999], [1043.0, 794.3333333333331], [1041.0, 735.6785714285713], [1047.0, 773.7000000000002], [1049.0, 1001.3555555555552], [1051.0, 747.222222222222], [1059.0, 1460.3404255319142], [1057.0, 913.4418604651163], [1085.0, 928.0877192982456], [1087.0, 423.4745762711865], [1081.0, 1334.469696969697], [1083.0, 944.4916666666666], [1077.0, 1511.9137931034481], [1079.0, 1422.6395348837207], [1073.0, 1141.9710144927533], [1061.0, 2177.848484848485], [1063.0, 2682.0000000000005], [1065.0, 739.5], [1067.0, 833.1969696969699], [1069.0, 1240.557142857143], [1071.0, 1094.428571428571], [1095.0, 979.7058823529412], [1089.0, 772.5681818181819], [1117.0, 716.9399999999998], [1119.0, 842.9561403508773], [1113.0, 685.0597014925373], [1115.0, 581.8030303030303], [1109.0, 765.6162790697673], [1111.0, 854.5070422535211], [1091.0, 897.3623188405795], [1093.0, 857.6785714285716], [1097.0, 636.6964285714288], [1099.0, 1118.950617283951], [1101.0, 1783.48717948718], [1103.0, 633.7076923076922], [1121.0, 852.3333333333335], [1151.0, 1490.9705882352944], [1147.0, 652.051282051282], [1149.0, 811.8000000000001], [1143.0, 1272.8], [1145.0, 1948.137931034483], [1139.0, 1574.8222222222225], [1137.0, 1406.8269230769229], [1141.0, 625.3389830508473], [1123.0, 897.6000000000001], [1125.0, 615.488372093023], [1127.0, 674.8249999999999], [1129.0, 550.8571428571428], [1131.0, 425.2272727272727], [1133.0, 1090.4583333333335], [1135.0, 871.2327586206897], [1105.0, 946.433962264151], [1107.0, 1130.0555555555559], [1159.0, 863.2666666666668], [1153.0, 1059.2695652173916], [1181.0, 1048.3076923076922], [1183.0, 796.4133333333332], [1177.0, 838.0701754385967], [1179.0, 1030.1509433962265], [1173.0, 575.2131147540981], [1175.0, 791.2333333333333], [1155.0, 929.4623655913981], [1157.0, 1166.147540983606], [1161.0, 762.0983606557375], [1163.0, 809.1599999999999], [1165.0, 879.7051282051282], [1167.0, 671.7619047619048], [1185.0, 961.4848484848485], [1213.0, 600.561403508772], [1215.0, 866.7391304347827], [1209.0, 646.7413793103448], [1211.0, 704.0999999999998], [1205.0, 823.873015873016], [1207.0, 794.089552238806], [1201.0, 769.7037037037037], [1203.0, 888.9480519480521], [1187.0, 851.6176470588235], [1189.0, 633.9428571428571], [1191.0, 539.8888888888889], [1193.0, 691.5555555555557], [1195.0, 883.3409090909091], [1197.0, 1112.7321428571427], [1199.0, 362.9677419354839], [1169.0, 686.7826086956521], [1171.0, 724.6818181818182], [1227.0, 757.6590909090908], [1219.0, 987.6666666666669], [1217.0, 843.62], [1245.0, 830.4264705882351], [1247.0, 660.4081632653061], [1241.0, 1141.5652173913045], [1243.0, 985.5714285714288], [1237.0, 825.3809523809523], [1239.0, 668.4421052631575], [1221.0, 493.33333333333337], [1223.0, 822.8181818181816], [1225.0, 674.8039215686277], [1229.0, 903.648148148148], [1231.0, 950.1538461538461], [1267.0, 1288.6538461538462], [1265.0, 603.6842105263157], [1269.0, 1295.8571428571431], [1271.0, 1308.5108695652175], [1273.0, 767.9499999999999], [1275.0, 922.820754716981], [1277.0, 984.1999999999999], [1279.0, 779.1447368421052], [1249.0, 908.09375], [1251.0, 927.9583333333333], [1253.0, 974.7567567567569], [1255.0, 873.8656716417912], [1257.0, 1165.2361111111113], [1263.0, 1417.7674418604654], [1261.0, 528.7567567567568], [1259.0, 660.2727272727273], [1233.0, 792.185185185185], [1235.0, 494.47058823529414], [1287.0, 1283.7711864406779], [1281.0, 1020.2833333333333], [1309.0, 1349.0000000000002], [1311.0, 1229.1333333333337], [1305.0, 863.5373134328356], [1307.0, 1020.831683168317], [1301.0, 1048.6666666666667], [1303.0, 1155.3456790123457], [1283.0, 642.5921052631577], [1285.0, 903.1269841269841], [1289.0, 1192.5200000000004], [1291.0, 1164.3695652173915], [1293.0, 1461.3529411764707], [1295.0, 849.406779661017], [1313.0, 1085.8181818181815], [1341.0, 1093.1538461538464], [1343.0, 934.7391304347824], [1337.0, 1128.569230769231], [1339.0, 855.6346153846154], [1333.0, 1287.8125000000002], [1335.0, 1613.8545454545456], [1329.0, 1850.6206896551723], [1331.0, 1003.7377049180327], [1315.0, 732.642857142857], [1317.0, 1386.2835820895523], [1319.0, 1545.5223880597016], [1321.0, 994.074074074074], [1323.0, 1665.25], [1325.0, 992.9545454545453], [1327.0, 1355.9444444444443], [1297.0, 964.7288135593222], [1299.0, 648.0535714285712], [1355.0, 1054.5128205128208], [1347.0, 691.0000000000001], [1345.0, 830.0526315789475], [1373.0, 1254.2407407407406], [1375.0, 1067.7999999999997], [1369.0, 835.2125984251968], [1371.0, 724.8928571428571], [1349.0, 706.7358490566037], [1351.0, 858.0714285714284], [1353.0, 845.6333333333334], [1357.0, 1591.5384615384614], [1359.0, 1135.4772727272725], [1393.0, 1452.8100000000002], [1395.0, 1613.1097560975609], [1397.0, 998.3333333333335], [1401.0, 901.0588235294117], [1399.0, 477.17142857142863], [1403.0, 725.0857142857143], [1405.0, 857.9740259740262], [1407.0, 553.3866666666668], [1377.0, 862.3571428571429], [1379.0, 951.0253164556962], [1381.0, 754.9795918367346], [1383.0, 1231.5961538461543], [1385.0, 894.8484848484849], [1387.0, 905.3535353535354], [1389.0, 913.712871287129], [1391.0, 968.5432098765433], [1361.0, 1505.2499999999998], [1365.0, 1494.774647887324], [1363.0, 1328.837837837838], [1367.0, 809.0886075949367], [1415.0, 817.4691358024693], [1409.0, 641.1612903225807], [1439.0, 918.2375000000001], [1435.0, 1379.076923076923], [1437.0, 1099.5384615384617], [1431.0, 356.57692307692304], [1429.0, 1650.951219512195], [1433.0, 1357.2307692307693], [1411.0, 1066.7413793103453], [1413.0, 1399.1400000000003], [1417.0, 883.8499999999999], [1419.0, 929.7604166666665], [1421.0, 930.7021276595743], [1423.0, 1153.3013698630136], [1441.0, 1016.6249999999999], [1469.0, 843.0833333333338], [1471.0, 1336.0], [1465.0, 1028.5128205128208], [1467.0, 1316.9774436090233], [1461.0, 1046.59375], [1463.0, 792.8958333333335], [1457.0, 1077.0291262135927], [1459.0, 855.1052631578946], [1443.0, 807.8478260869565], [1445.0, 1156.0000000000002], [1447.0, 1035.7011494252874], [1449.0, 849.8285714285715], [1451.0, 963.9545454545455], [1453.0, 862.0555555555553], [1455.0, 759.4687499999998], [1425.0, 1083.6481481481483], [1427.0, 950.3888888888887], [1475.0, 589.936170212766], [1473.0, 1151.7432432432431], [1499.0, 1167.09649122807], [1477.0, 1031.5983606557381], [1479.0, 1343.444444444445], [1481.0, 1710.9999999999995], [1483.0, 1520.9402985074632], [1485.0, 1457.7263157894736], [1487.0, 1375.8984375], [1495.0, 1515.54054054054], [1493.0, 1395.7500000000002], [1491.0, 1294.2380952380952], [1489.0, 1022.3684210526314], [1497.0, 1371.4090909090914], [1.0, 3.5]], "isOverall": false, "label": "Petición HTTP", "isController": false}, {"data": [[1222.0193559085062, 1063.7810483292292]], "isOverall": false, "label": "Petición HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 110279.86666666667, "minX": 1.54979238E12, "maxY": 596580.8333333334, "series": [{"data": [[1.54979274E12, 596580.8333333334], [1.54979244E12, 487391.18333333335], [1.54979238E12, 338239.06666666665], [1.54979268E12, 428414.1666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.54979274E12, 131383.23333333334], [1.54979244E12, 158908.5], [1.54979238E12, 110279.86666666667], [1.54979268E12, 139680.05]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54979274E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 620.7991578094017, "minX": 1.54979238E12, "maxY": 1457.9407876230503, "series": [{"data": [[1.54979274E12, 1065.688122959091], [1.54979244E12, 1457.9407876230503], [1.54979238E12, 620.7991578094017], [1.54979268E12, 963.1198819492611]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54979274E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 620.7968158890305, "minX": 1.54979238E12, "maxY": 1457.9393342709789, "series": [{"data": [[1.54979274E12, 990.5720538202595], [1.54979244E12, 1457.9393342709789], [1.54979238E12, 620.7968158890305], [1.54979268E12, 963.1186552171608]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54979274E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.2259052422986736, "minX": 1.54979238E12, "maxY": 138.99499068232632, "series": [{"data": [[1.54979274E12, 138.99499068232632], [1.54979244E12, 14.108845132051885], [1.54979238E12, 3.2259052422986736], [1.54979268E12, 32.27816594662855]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54979274E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.54979238E12, "maxY": 67451.0, "series": [{"data": [[1.54979274E12, 8749.0], [1.54979244E12, 67451.0], [1.54979238E12, 31553.0], [1.54979268E12, 9732.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.54979274E12, 3.0], [1.54979244E12, 3.0], [1.54979238E12, 4.0], [1.54979268E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.54979274E12, 1662.9000000000015], [1.54979244E12, 2663.0], [1.54979238E12, 1430.9000000000015], [1.54979268E12, 3097.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.54979274E12, 3372.0], [1.54979244E12, 4642.0], [1.54979238E12, 7517.850000000344], [1.54979268E12, 5206.960000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.54979274E12, 2264.0], [1.54979244E12, 3447.9500000000007], [1.54979238E12, 1803.9500000000007], [1.54979268E12, 3739.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54979274E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 419.0, "minX": 740.0, "maxY": 1080.5, "series": [{"data": [[1066.0, 759.0], [740.0, 540.0], [937.0, 1080.5], [974.0, 522.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[974.0, 419.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1066.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 740.0, "maxY": 1080.5, "series": [{"data": [[1066.0, 759.0], [740.0, 540.0], [937.0, 1080.5], [974.0, 522.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[974.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1066.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 765.1333333333333, "minX": 1.54979238E12, "maxY": 1041.5, "series": [{"data": [[1.54979274E12, 949.85], [1.54979244E12, 1041.5], [1.54979238E12, 765.1333333333333], [1.54979268E12, 962.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54979274E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 93.08333333333333, "minX": 1.54979238E12, "maxY": 1066.5, "series": [{"data": [[1.54979274E12, 881.7666666666667], [1.54979244E12, 1066.5], [1.54979238E12, 740.1333333333333], [1.54979268E12, 937.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.54979274E12, 93.08333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54979274E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 93.08333333333333, "minX": 1.54979238E12, "maxY": 1066.5, "series": [{"data": [[1.54979274E12, 881.7666666666667], [1.54979244E12, 1066.5], [1.54979238E12, 740.1333333333333], [1.54979268E12, 937.45]], "isOverall": false, "label": "Petición HTTP-success", "isController": false}, {"data": [[1.54979274E12, 93.08333333333333]], "isOverall": false, "label": "Petición HTTP-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54979274E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
